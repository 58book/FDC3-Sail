interface Window {
    readonly versions: NodeJS.ProcessVersions;
    readonly workspace: { isConnected: () => boolean; };
    readonly home: { getApps: () => Promise<unknown>; };
    readonly fdc3: { open: (name: string, context?: import("/Users/nicholaskolba/connectifi/agent/electron-fdc3/node_modules/@finos/fdc3/dist/context/ContextTypes").Context) => Promise<any>; broadcast: (context: import("/Users/nicholaskolba/connectifi/agent/electron-fdc3/node_modules/@finos/fdc3/dist/context/ContextTypes").Context) => void; raiseIntent: (intent: string, context: import("/Users/nicholaskolba/connectifi/agent/electron-fdc3/node_modules/@finos/fdc3/dist/context/ContextTypes").Context, target: string) => Promise<any>; addContextListener: (contextType: any, handler?: any) => Listener; addIntentListener: (intent: string, listener: import("/Users/nicholaskolba/connectifi/agent/electron-fdc3/node_modules/@finos/fdc3/dist/api/Types").ContextHandler) => Listener; findIntent: (intent: string, context: import("/Users/nicholaskolba/connectifi/agent/electron-fdc3/node_modules/@finos/fdc3/dist/context/ContextTypes").Context) => Promise<any>; findIntentsByContext: (context: import("/Users/nicholaskolba/connectifi/agent/electron-fdc3/node_modules/@finos/fdc3/dist/context/ContextTypes").Context) => Promise<any>; getSystemChannels: () => Promise<any>; getOrCreateChannel: (channelId: string) => Promise<any>; joinChannel: (channel: string) => Promise<void>; leaveCurrentChannel: () => Promise<any>; getCurrentChannel: () => Promise<any>; getAppInstance: (instanceId: string) => Promise<import("/Users/nicholaskolba/connectifi/agent/electron-fdc3/packages/main/src/types/AppInstance").AppInstance>; };
}
